{"ast":null,"code":"import { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { Svg } from \"./svgImage\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../app.component\";\nimport * as i2 from \"@angular/forms\";\nexport let SimulationFormComponent = /*#__PURE__*/(() => {\n  class SimulationFormComponent {\n    M = 0;\n    N = 0;\n    appComponentClass;\n    svgClass;\n    constructor(_appComponentClass) {\n      this.appComponentClass = _appComponentClass;\n    }\n    stopSimulation() {\n      this.appComponentClass.formChange.next(\"stopSim\");\n    }\n    // тут пишем логику на typescript\n    cockroaches = [];\n    ngOnInit() {\n      this.svgClass = new Svg();\n      const bugIcons = document.getElementsByClassName(\"bug-icon\");\n      for (let i = 0; i < bugIcons.length; i++) {\n        this.makeCockroach(bugIcons[i]);\n      }\n      this.step();\n    }\n    makeCockroach(icon) {\n      const rect1 = document.querySelector(\".field\")?.getBoundingClientRect();\n      if (!rect1) return {\n        update: () => {}\n      }; // Проверка на наличие rect\n      let vspeed = 50;\n      const aspeed = 10 * Math.PI;\n      const p = document.createElement(\"img\");\n      let lastT = 0;\n      let lastTargetTime = -100;\n      let a = 0;\n      let x = Math.random() * (rect1.width - 20);\n      let y = Math.random() * (rect1.width - 20);\n      let tx = Math.random() * (rect1.width - 20);\n      let ty = Math.random() * (rect1.width - 20);\n      let dxy = 0;\n      const svg = document.createElement(\"div\");\n      svg.classList.add(\"bug-icon\");\n      const desiredColor = \"#00fa00\";\n      let add1 = this.svgClass.add1;\n      add1 = add1.replace(/fill=\"#000000\"/, `fill=\"${desiredColor}\"`);\n      svg.innerHTML = add1;\n      //const lastFillElement = svg.querySelector(\"[fill]\"); // Найдите последний элемент с атрибутом fill\n      //lastFillElement?.setAttribute(\"fill\", \"#00fa00\");\n      console.log(\"картинка\", svg);\n      const update = t => {\n        const rect = document.querySelector(\".field\")?.getBoundingClientRect();\n        if (!rect) return; // Проверка на наличие rect\n        if (t >= lastTargetTime + 3) {\n          p.remove;\n          svg.remove;\n          tx = Math.random() * (rect.width - 20); // Ограничение по ширине\n          ty = Math.random() * (rect.height - 20); // Ограничение по высоте\n          console.log(\"coords\", tx, ty);\n          //t = t * 1000;\n          lastTargetTime = t;\n        }\n        const dt = t - lastT;\n        const app = document.getElementsByClassName(\"field\")[0];\n        p.src = \"https://svgshare.com/i/t12.svg\";\n        p.style.position = \"absolute\";\n        p.style.left = tx + \"px\";\n        p.style.top = ty + \"px\";\n        app?.appendChild(p);\n        app?.appendChild(svg);\n        app.style.backgroundColor = \"red\";\n        //console.log(\"новое\", tx, ty);\n        dxy = Math.sqrt(Math.pow(tx - x, 2) + Math.pow(ty - y, 2)) / 1000;\n        vspeed = dxy / dt;\n        //console.log(\"скорость\", vspeed, dt, dxy);\n        const ta = Math.atan2(ty - y, tx - x);\n        for (; a < ta; a += 2 * Math.PI) {}\n        for (; a > ta; a -= 2 * Math.PI) {}\n        const a2 = a + 2 * Math.PI;\n        if (ta - a < a2 - ta) {\n          a = Math.min(ta, a + dt * aspeed);\n        } else {\n          a = Math.max(ta, a2 - dt * aspeed);\n        }\n        console.log(\"xxx\", tx, ty);\n        for (let frame = 0; frame < 30; frame++) {\n          x += dt * vspeed * Math.cos(a);\n          y += dt * vspeed * Math.sin(a);\n        }\n        icon.style.left = x + \"px\";\n        icon.style.top = y + \"px\";\n        icon.style.transform = \"rotate(\" + (180 * a / Math.PI - 135) + \"deg)\";\n        lastT = t;\n      };\n      const cockroach = {\n        update: update\n      };\n      this.cockroaches.push(cockroach);\n      return cockroach;\n    }\n    step() {\n      const t = performance.now() / 1000;\n      for (const cockroach of this.cockroaches) {\n        cockroach.update(t);\n      }\n      window.requestAnimationFrame(() => this.step());\n    }\n    static ɵfac = function SimulationFormComponent_Factory(t) {\n      return new (t || SimulationFormComponent)(i0.ɵɵdirectiveInject(i1.AppComponent));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SimulationFormComponent,\n      selectors: [[\"simulationForm-comp\"]],\n      inputs: {\n        M: \"M\",\n        N: \"N\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 17,\n      vars: 4,\n      consts: [[1, \"navbar\", \"navbar-expand-sm\", \"bg-dark\", \"navbar-dark\"], [1, \"container-fluid\"], [1, \"navbar-nav\", \"mx-auto\"], [1, \"nav-item\"], [1, \"ligo\"], [1, \"d-flex\"], [1, \"field\"], [\"id\", \"bug-container\", 1, \"header\"], [\"id\", \"bug\", \"src\", \"https://svgshare.com/i/t12.svg\", 1, \"bug-icon\"], [1, \"center\"], [3, \"click\"], [\"height\", \"100\", \"width\", \"100\"], [0, \"xlink\", \"href\", \"/src/app/Animals/body1.svg\"]],\n      template: function SimulationFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"ul\", 2)(3, \"li\", 3)(4, \"h1\", 4);\n          i0.ɵɵtext(5, \"\\u042D\\u0432\\u043E\\u043B\\u044E\\u0446\\u0438\\u044F\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(6, \"form\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 6)(8, \"header\", 7);\n          i0.ɵɵelement(9, \"img\", 8)(10, \"img\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(11, \"br\");\n          i0.ɵɵelementStart(12, \"div\", 9)(13, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function SimulationFormComponent_Template_button_click_13_listener() {\n            return ctx.stopSimulation();\n          });\n          i0.ɵɵtext(14, \"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(15, \"svg\", 11);\n          i0.ɵɵelement(16, \"use\", 12);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵstyleProp(\"width\", ctx.M, \"px\")(\"height\", ctx.N, \"px\");\n        }\n      },\n      dependencies: [CommonModule, FormsModule, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm],\n      styles: [\".example[_ngcontent-%COMP%]{color:#006400;background-color:#5f9ea0}.ligo[_ngcontent-%COMP%]{font-family:Montserrat,sans-serif;float:none;color:#a6ff00}.field[_ngcontent-%COMP%]{position:relative;margin-left:auto;margin-right:auto;text-align:center;display:block;border:10px inset lightblue}.center[_ngcontent-%COMP%]{text-align:center}button[_ngcontent-%COMP%]{background-color:#d2691e}#bug-container[_ngcontent-%COMP%]{position:relative;height:200px}.bug-icon[_ngcontent-%COMP%]{height:100px;width:100px;position:absolute;top:0;left:0;z-index:0}\"]\n    });\n  }\n  return SimulationFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}