{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u0418\\u043D\\u0441\\u0442\\u0438\\u0442\\u0443\\u0442/8 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440/Diplom/diplom/dipl/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { CommonModule } from \"@angular/common\";\nimport { Component, Input } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { Svg } from \"./svgImage\";\nimport { UserData } from \"../models/models\";\nimport { lastValueFrom } from \"rxjs\";\nimport { HttpClientModule } from \"@angular/common/http\";\nlet SimulationFormComponent = class SimulationFormComponent {\n  http;\n  M = 0;\n  N = 0;\n  user;\n  state;\n  appComponentClass;\n  svgClass;\n  userData = new UserData();\n  buttonClkVihod() {\n    this.appComponentClass.formChange.next(\"vihod\");\n  }\n  constructor(_appComponentClass, http) {\n    this.http = http;\n    this.appComponentClass = _appComponentClass;\n  }\n  stopSimulation() {\n    this.appComponentClass.formChange.next(\"stopSim\");\n  }\n  // тут пишем логику на typescript\n  animalsCount = 0;\n  ix;\n  cockroaches = [];\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.svgClass = new Svg();\n      console.log(\"state\", _this.state);\n      _this.userData.User = _this.user;\n      _this.userData.CurrentState = _this.state;\n      _this.creatureHTML();\n      _this.state = JSON.parse(JSON.stringify(_this.userData.CurrentState));\n      yield _this.callNewState();\n      console.log(\"newState\", _this.userData.CurrentState);\n      _this.challengeMakeCockroach();\n      _this.step();\n      console.log(\"длина животных\", _this.userData.CurrentState.animals.length);\n    })();\n  }\n  challengeMakeCockroach() {\n    const bugIcons = document.getElementsByClassName(\"bug-icon\");\n    for (this.ix = 0; this.ix < bugIcons.length; this.ix++) {\n      this.makeCockroach(bugIcons[this.ix]);\n    }\n  }\n  callNewState() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.userData.CurrentState = yield _this2.mainSimLoop(_this2.userData);\n    })();\n  }\n  creatureHTML() {\n    const numberToBody = new Map([[0, this.svgClass.body1], [1, this.svgClass.body2], [10, this.svgClass.body3], [11, this.svgClass.body4]]);\n    const numberToHead = new Map([[0, this.svgClass.head1], [1, this.svgClass.head2], [10, this.svgClass.head3], [11, this.svgClass.head4]]);\n    const numberToEye = new Map([[0, this.svgClass.eye1], [1, this.svgClass.eye2], [10, this.svgClass.eye3], [11, this.svgClass.eye4]]);\n    const numberToMounth = new Map([[0, this.svgClass.mouth1], [1, this.svgClass.mouth2], [10, this.svgClass.mouth3], [11, this.svgClass.mouth4]]);\n    const numberToAdditional = new Map([[0, this.svgClass.add1], [1, this.svgClass.add2], [10, this.svgClass.add3], [11, this.svgClass.add4]]);\n    const app = document.getElementsByClassName(\"header\")[0];\n    for (let i = 0; i < this.userData.CurrentState.animals.length; i++) {\n      let microorganism = document.createElement(\"div\");\n      microorganism.style.position = \"absolute\";\n      microorganism.classList.add(\"bug-icon\");\n      let body = numberToBody.get(this.userData.CurrentState.animals[i].decipheredGenome.bodyType);\n      let haed = numberToHead.get(this.userData.CurrentState.animals[i].decipheredGenome.headType);\n      let eye = numberToEye.get(this.userData.CurrentState.animals[i].decipheredGenome.eyeType);\n      let mounth = numberToMounth.get(this.userData.CurrentState.animals[i].decipheredGenome.mouthType);\n      let additional = numberToAdditional.get(this.userData.CurrentState.animals[i].decipheredGenome.additionalType);\n      console.log(\"цвет\", this.userData.CurrentState.animals[i].decipheredGenome.bodyColor.b);\n      let rgb = `rgb(${this.userData.CurrentState.animals[i].decipheredGenome.bodyColor.r}, ${this.userData.CurrentState.animals[i].decipheredGenome.bodyColor.g}, ${this.userData.CurrentState.animals[i].decipheredGenome.bodyColor.b})`;\n      body = body.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n      additional = additional.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n      rgb = `rgb(${this.userData.CurrentState.animals[i].decipheredGenome.headColor.r}, ${this.userData.CurrentState.animals[i].decipheredGenome.headColor.g}, ${this.userData.CurrentState.animals[i].decipheredGenome.headColor.b})`;\n      haed = haed.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n      mounth = mounth.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n      rgb = `rgb(${this.userData.CurrentState.animals[i].decipheredGenome.eyeColor.r}, ${this.userData.CurrentState.animals[i].decipheredGenome.eyeColor.g}, ${this.userData.CurrentState.animals[i].decipheredGenome.eyeColor.b})`;\n      eye = eye.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n      let animalVid = body + eye + mounth + additional;\n      haed = haed.replace(/<\\/svg>/, `${animalVid}</svg>`);\n      microorganism.style.left = this.userData.CurrentState.animals[i].coordinates[0] + \"px\";\n      microorganism.style.top = this.userData.CurrentState.animals[i].coordinates[1] + \"px\";\n      microorganism.innerHTML = haed;\n      app?.appendChild(microorganism);\n    }\n    for (let i = 0; i < this.userData.CurrentState.food.length; i++) {\n      let foods = document.createElement(\"div\");\n      foods.style.position = \"absolute\";\n      foods.style.left = this.userData.CurrentState.food[i].coordinates[0] + \"px\";\n      foods.style.top = this.userData.CurrentState.food[i].coordinates[1] + \"px\";\n      foods.classList.add(\"food-icon\");\n      let food;\n      if (this.userData.CurrentState.food[i].type == true) {\n        food = this.svgClass.meat;\n      } else {\n        food = this.svgClass.grass;\n      }\n      foods.innerHTML = food;\n      app?.appendChild(foods);\n    }\n  }\n  makeCockroach(icon) {\n    const rect1 = document.querySelector(\".field\")?.getBoundingClientRect();\n    if (!rect1) return {\n      update: () => {}\n    }; // Проверка на наличие rect\n    let vspeed = 50;\n    const aspeed = 10 * Math.PI;\n    //const p = document.createElement(\"img\");\n    let lastT = 0;\n    let lastTargetTime = -100;\n    let a = 0; //this.state.animals[this.ix].turnAngle;\n    /*let tx: number;\n    let ty: number;\n    if (this.state.animals.length > this.userData.CurrentState.animals.length) {\n      tx = this.state.animals[this.ix].coordinates[0];\n      ty = this.state.animals[this.ix].coordinates[1];\n    } else {\n      tx = this.userData.CurrentState.animals[this.ix].coordinates[0];\n      ty = this.userData.CurrentState.animals[this.ix].coordinates[1];\n    }*/\n    let x = Math.random() * (rect1.width - 20);\n    let y = Math.random() * (rect1.width - 20);\n    let tx = Math.random() * (rect1.width - 20);\n    let ty = Math.random() * (rect1.width - 20);\n    let dxy = 0;\n    const svg = document.createElement(\"div\");\n    /*\n    svg.classList.add(\"bug-icon\");\n    const desiredColor = \"#00fa00\";\n    let add1 = this.svgClass.body1;\n    add1 = add1.replace(/fill=\"#000000\"/, `fill=\"${desiredColor}\"`);\n    svg.innerHTML = add1;\n    */\n    //svg.classList.add(\"bug-icon\");\n    //const app = document.getElementsByClassName(\"field\")[0];\n    /*\n    const desiredColor = \"rgb(255, 0, 0)\";\n    let add1 = this.svgClass.head1;\n    add1 = add1.replace(/fill=\"#000000\"/, `fill=\"${desiredColor}\"`);\n    svg.innerHTML = add1;\n    console.log(\"картинка\", svg);\n    app?.appendChild(svg);\n    */\n    const update = (t, isUpd) => {\n      const rect = document.querySelector(\".field\")?.getBoundingClientRect();\n      if (!rect) return; // Проверка на наличие rect\n      if (t >= lastTargetTime + 3 /*&& isUpd == true*/) {\n        //document.getElementById(\"bug-container\").innerHTML = \"\";\n        //p.remove;\n        //svg.remove;\n        //tx = Math.random() * (rect.width - 20); // Ограничение по ширине\n        //ty = Math.random() * (rect.height - 20); // Ограничение по высоте\n        //console.log(\"coords\", tx, ty);\n        //t = t * 1000;\n        lastTargetTime = t;\n        this.countAnimals();\n        console.log(\"счет\", isUpd);\n      } /*else if (t >= lastTargetTime + 5 && isUpd == false) {\n        //document.getElementById(\"bug-container\").innerHTML = \"\";\n        //document.getElementById(\"fieldHTML\").innerHTML = \"\";\n        //icon.remove;\n        p.remove;\n        //svg.remove;\n        tx = Math.random() * (rect.width - 20); // Ограничение по ширине\n        ty = Math.random() * (rect.height - 20); // Ограничение по высоте\n        //console.log(\"coords\", tx, ty);\n        //t = t * 1000;\n        lastTargetTime = t;\n        console.log(\"счет\", isUpd);\n             }*/\n      const dt = t - lastT;\n      //console.log(\"картинка\", icon);\n      //svg.innerHTML = \"\";\n      //p.src = \"https://svgshare.com/i/t12.svg\";\n      //p.style.position = \"absolute\";\n      //p.style.left = tx + \"px\";\n      //p.style.top = ty + \"px\";\n      //app?.appendChild(p);\n      //(app as HTMLElement).style.backgroundColor = \"red\";\n      //console.log(\"новое\", tx, ty);\n      dxy = Math.sqrt(Math.pow(tx - x, 2) + Math.pow(ty - y, 2)) / 1000;\n      vspeed = dxy / dt;\n      //console.log(\"скорость\", vspeed, dt, dxy);\n      const ta = Math.atan2(ty - y, tx - x);\n      for (; a < ta; a += 2 * Math.PI) {}\n      for (; a > ta; a -= 2 * Math.PI) {}\n      const a2 = a + 2 * Math.PI;\n      if (ta - a < a2 - ta) {\n        a = Math.min(ta, a + dt * aspeed);\n        //this.userData.CurrentState.animals[this.ix].turnAngle = a;\n      } else {\n        a = Math.max(ta, a2 - dt * aspeed);\n        //this.userData.CurrentState.animals[this.ix].turnAngle = a;\n      }\n      //console.log(\"xxx\", tx, ty);\n      for (let frame = 0; frame < 30; frame++) {\n        x += dt * vspeed * Math.cos(a);\n        y += dt * vspeed * Math.sin(a);\n      }\n      icon.style.left = x + \"px\";\n      icon.style.top = y + \"px\";\n      icon.style.transform = \"rotate(\" + (180 * a / Math.PI - 270) + \"deg)\";\n      lastT = t;\n    };\n    const cockroach = {\n      update: update\n    };\n    this.cockroaches.push(cockroach);\n    return cockroach;\n  }\n  step() {\n    const t = performance.now() / 1000;\n    let int = 1;\n    let isUpd = false;\n    let i;\n    if (this.userData.CurrentState.animals.length <= this.state.animals.length) {\n      i = this.userData.CurrentState.animals.length - 1;\n    } else {\n      i = this.state.animals.length - 1;\n    }\n    for (i = 0; i < this.cockroaches.length; i++) {\n      const cockroach = this.cockroaches[i];\n      cockroach.update(t, isUpd);\n      //count = count + 1;\n      //if (count == this.userData.CurrentState.animals.length) {\n      //isUpd = true;\n      //count = 1;\n      //}\n      //isUpd = false;\n    }\n\n    console.log(\"число\", int++);\n    window.requestAnimationFrame(() => this.step());\n  }\n  countAnimals() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.animalsCount++;\n      if (_this3.animalsCount == _this3.userData.CurrentState.animals.length) {\n        _this3.removeCockroaches();\n        _this3.creatureHTML();\n        _this3.state = JSON.parse(JSON.stringify(_this3.userData.CurrentState));\n        console.log(\"старый пакет\", _this3.state);\n        yield _this3.callNewState();\n        console.log(\"новый пакет\", _this3.userData.CurrentState);\n        _this3.challengeMakeCockroach();\n        _this3.step();\n        _this3.animalsCount = 0;\n      }\n    })();\n  }\n  removeCockroaches() {\n    this.cockroaches = []; // Очистка массива тараканов\n    const bugIcons = document.querySelectorAll(\".bug-icon\");\n    bugIcons.forEach(bugIcon => bugIcon.remove()); // Удаление элементов из DOM\n    const foodIcons = document.querySelectorAll(\".food-icon\");\n    foodIcons.forEach(foodIcon => foodIcon.remove()); // Удаление элементов из DOM\n  }\n\n  mainSimLoop(data) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return yield lastValueFrom(_this4.http.post(`http://localhost:4201/evoSim/mainSimLoop`, data));\n    })();\n  }\n};\n__decorate([Input()], SimulationFormComponent.prototype, \"M\", void 0);\n__decorate([Input()], SimulationFormComponent.prototype, \"N\", void 0);\n__decorate([Input()], SimulationFormComponent.prototype, \"user\", void 0);\n__decorate([Input()], SimulationFormComponent.prototype, \"state\", void 0);\nSimulationFormComponent = __decorate([Component({\n  selector: \"simulationForm-comp\",\n  templateUrl: \"./simulationForm.component.html\",\n  styleUrls: [\"./simulationForm.component.scss\"],\n  standalone: true,\n  imports: [CommonModule, FormsModule, HttpClientModule] //чтобы работало *ngIf\n})], SimulationFormComponent);\nexport { SimulationFormComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}