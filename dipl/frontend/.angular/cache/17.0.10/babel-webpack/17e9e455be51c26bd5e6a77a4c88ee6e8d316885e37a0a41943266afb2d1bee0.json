{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u0418\\u043D\\u0441\\u0442\\u0438\\u0442\\u0443\\u0442/8 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440/Diplom/diplom/dipl/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { Svg } from \"./svgImage\";\nimport { UserData } from \"../models/models\";\nimport { lastValueFrom } from \"rxjs\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../app.component\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/forms\";\nexport let SimulationFormComponent = /*#__PURE__*/(() => {\n  class SimulationFormComponent {\n    http;\n    M = 0;\n    N = 0;\n    user;\n    state;\n    appComponentClass;\n    svgClass;\n    userData = new UserData();\n    buttonClkVihod() {\n      this.appComponentClass.formChange.next(\"vihod\");\n    }\n    constructor(_appComponentClass, http) {\n      this.http = http;\n      this.appComponentClass = _appComponentClass;\n    }\n    stopSimulation() {\n      this.appComponentClass.formChange.next(\"stopSim\");\n    }\n    // тут пишем логику на typescript\n    animalsCount = 0;\n    ix;\n    cockroaches = [];\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.svgClass = new Svg();\n        console.log(\"state\", _this.state);\n        _this.userData.User = _this.user;\n        _this.userData.CurrentState = _this.state;\n        _this.creatureHTML();\n        _this.state = JSON.parse(JSON.stringify(_this.userData.CurrentState));\n        yield _this.callNewState();\n        console.log(\"newState\", _this.userData.CurrentState);\n        _this.challengeMakeCockroach();\n        _this.step();\n        console.log(\"длина животных\", _this.userData.CurrentState.animals.length);\n      })();\n    }\n    challengeMakeCockroach() {\n      const bugIcons = document.getElementsByClassName(\"bug-icon\");\n      for (this.ix = 0; this.ix < bugIcons.length; this.ix++) {\n        this.makeCockroach(bugIcons[this.ix]);\n      }\n    }\n    callNewState() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.userData.CurrentState = yield _this2.mainSimLoop(_this2.userData);\n      })();\n    }\n    creatureHTML() {\n      const numberToBody = new Map([[0, this.svgClass.body1], [1, this.svgClass.body2], [10, this.svgClass.body3], [11, this.svgClass.body4]]);\n      const numberToHead = new Map([[0, this.svgClass.head1], [1, this.svgClass.head2], [10, this.svgClass.head3], [11, this.svgClass.head4]]);\n      const numberToEye = new Map([[0, this.svgClass.eye1], [1, this.svgClass.eye2], [10, this.svgClass.eye3], [11, this.svgClass.eye4]]);\n      const numberToMounth = new Map([[0, this.svgClass.mouth1], [1, this.svgClass.mouth2], [10, this.svgClass.mouth3], [11, this.svgClass.mouth4]]);\n      const numberToAdditional = new Map([[0, this.svgClass.add1], [1, this.svgClass.add2], [10, this.svgClass.add3], [11, this.svgClass.add4]]);\n      const app = document.getElementsByClassName(\"header\")[0];\n      for (let i = 0; i < this.state.animals.length; i++) {\n        let microorganism = document.createElement(\"div\");\n        microorganism.style.position = \"absolute\";\n        microorganism.classList.add(\"bug-icon\");\n        let body = numberToBody.get(this.userData.CurrentState.animals[i].decipheredGenome.bodyType);\n        let haed = numberToHead.get(this.userData.CurrentState.animals[i].decipheredGenome.headType);\n        let eye = numberToEye.get(this.userData.CurrentState.animals[i].decipheredGenome.eyeType);\n        let mounth = numberToMounth.get(this.userData.CurrentState.animals[i].decipheredGenome.mouthType);\n        let additional = numberToAdditional.get(this.userData.CurrentState.animals[i].decipheredGenome.additionalType);\n        console.log(\"цвет\", this.userData.CurrentState.animals[i].decipheredGenome.bodyColor.b);\n        let rgb = `rgb(${this.userData.CurrentState.animals[i].decipheredGenome.bodyColor.r}, ${this.userData.CurrentState.animals[i].decipheredGenome.bodyColor.g}, ${this.userData.CurrentState.animals[i].decipheredGenome.bodyColor.b})`;\n        body = body.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n        additional = additional.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n        rgb = `rgb(${this.userData.CurrentState.animals[i].decipheredGenome.headColor.r}, ${this.userData.CurrentState.animals[i].decipheredGenome.headColor.g}, ${this.userData.CurrentState.animals[i].decipheredGenome.headColor.b})`;\n        haed = haed.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n        mounth = mounth.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n        rgb = `rgb(${this.userData.CurrentState.animals[i].decipheredGenome.eyeColor.r}, ${this.userData.CurrentState.animals[i].decipheredGenome.eyeColor.g}, ${this.userData.CurrentState.animals[i].decipheredGenome.eyeColor.b})`;\n        eye = eye.replace(/fill=\"#000000\"/, `fill=\"${rgb}\"`);\n        let animalVid = body + eye + mounth + additional;\n        haed = haed.replace(/<\\/svg>/, `${animalVid}</svg>`);\n        microorganism.style.left = this.userData.CurrentState.animals[i].coordinates[0] + \"px\";\n        microorganism.style.top = this.userData.CurrentState.animals[i].coordinates[1] + \"px\";\n        microorganism.innerHTML = haed;\n        app?.appendChild(microorganism);\n      }\n      for (let i = 0; i < this.state.food.length; i++) {\n        let foods = document.createElement(\"div\");\n        foods.style.position = \"absolute\";\n        foods.style.left = this.userData.CurrentState.food[i].coordinates[0] + \"px\";\n        foods.style.top = this.userData.CurrentState.food[i].coordinates[1] + \"px\";\n        foods.classList.add(\"food-icon\");\n        let food;\n        if (this.userData.CurrentState.food[i].type == true) {\n          food = this.svgClass.meat;\n        } else {\n          food = this.svgClass.grass;\n        }\n        foods.innerHTML = food;\n        app?.appendChild(foods);\n      }\n    }\n    makeCockroach(icon) {\n      const rect1 = document.querySelector(\".field\")?.getBoundingClientRect();\n      if (!rect1) return {\n        update: () => {}\n      }; // Проверка на наличие rect\n      let vspeed = 50;\n      const aspeed = 10 * Math.PI;\n      //const p = document.createElement(\"img\");\n      let lastT = 0;\n      let lastTargetTime = -100;\n      let a = 0; //this.state.animals[this.ix].turnAngle;\n      let tx;\n      let ty;\n      if (this.state.animals.length > this.userData.CurrentState.animals.length && this.ix >= this.userData.CurrentState.animals.length) {\n        tx = this.state.animals[this.ix].coordinates[0];\n        ty = this.state.animals[this.ix].coordinates[1];\n      } else {\n        tx = this.userData.CurrentState.animals[this.ix].coordinates[0];\n        ty = this.userData.CurrentState.animals[this.ix].coordinates[1];\n      }\n      let x = this.state.animals[this.ix].coordinates[0];\n      let y = this.state.animals[this.ix].coordinates[1];\n      //let tx: number = this.userData.CurrentState.animals[this.ix].coordinates[0];\n      //let ty: number = this.userData.CurrentState.animals[this.ix].coordinates[1];\n      let dxy = 0;\n      const update = t => {\n        const rect = document.querySelector(\".field\")?.getBoundingClientRect();\n        if (!rect) return; // Проверка на наличие rect\n        if (t >= lastTargetTime + 3 /*&& isUpd == true*/) {\n          //document.getElementById(\"bug-container\").innerHTML = \"\";\n          //p.remove;\n          //svg.remove;\n          //tx = Math.random() * (rect.width - 20); // Ограничение по ширине\n          //ty = Math.random() * (rect.height - 20); // Ограничение по высоте\n          //console.log(\"coords\", tx, ty);\n          //t = t * 1000;\n          lastTargetTime = t;\n          this.countAnimals();\n        }\n        const dt = t - lastT;\n        //console.log(\"картинка\", icon);\n        //svg.innerHTML = \"\";\n        //p.src = \"https://svgshare.com/i/t12.svg\";\n        //p.style.position = \"absolute\";\n        //p.style.left = tx + \"px\";\n        //p.style.top = ty + \"px\";\n        //app?.appendChild(p);\n        //(app as HTMLElement).style.backgroundColor = \"red\";\n        //console.log(\"новое\", tx, ty);\n        dxy = Math.sqrt(Math.pow(tx - x, 2) + Math.pow(ty - y, 2)) / 1000;\n        vspeed = dxy / dt;\n        //console.log(\"скорость\", vspeed, dt, dxy);\n        const ta = Math.atan2(ty - y, tx - x);\n        for (; a < ta; a += 2 * Math.PI) {}\n        for (; a > ta; a -= 2 * Math.PI) {}\n        const a2 = a + 2 * Math.PI;\n        if (ta - a < a2 - ta) {\n          a = Math.min(ta, a + dt * aspeed);\n          //this.userData.CurrentState.animals[this.ix].turnAngle = a;\n        } else {\n          a = Math.max(ta, a2 - dt * aspeed);\n          //this.userData.CurrentState.animals[this.ix].turnAngle = a;\n        }\n        //console.log(\"xxx\", tx, ty);\n        for (let frame = 0; frame < 30; frame++) {\n          x += dt * vspeed * Math.cos(a);\n          y += dt * vspeed * Math.sin(a);\n        }\n        icon.style.left = x + \"px\";\n        icon.style.top = y + \"px\";\n        icon.style.transform = \"rotate(\" + (180 * a / Math.PI - 270) + \"deg)\";\n        lastT = t;\n      };\n      const cockroach = {\n        update: update\n      };\n      this.cockroaches.push(cockroach);\n      return cockroach;\n    }\n    step() {\n      const t = performance.now() / 1000;\n      let int = 1;\n      let i;\n      /*if (\n        this.userData.CurrentState.animals.length <= this.state.animals.length\n      ) {\n        i = this.userData.CurrentState.animals.length - 1;\n      } else {\n        i = this.state.animals.length - 1;\n      }*/\n      for (let i = 0; i < this.cockroaches.length; i++) {\n        const cockroach = this.cockroaches[i];\n        cockroach.update(t);\n        //count = count + 1;\n        //if (count == this.userData.CurrentState.animals.length) {\n        //isUpd = true;\n        //count = 1;\n        //}\n        //isUpd = false;\n      }\n\n      console.log(\"число\", int++);\n      window.requestAnimationFrame(() => this.step());\n    }\n    countAnimals() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        _this3.animalsCount++;\n        if (_this3.animalsCount == _this3.state.animals.length) {\n          _this3.removeCockroaches();\n          _this3.creatureHTML();\n          _this3.state = JSON.parse(JSON.stringify(_this3.userData.CurrentState));\n          console.log(\"старый пакет\", _this3.state);\n          yield _this3.callNewState();\n          console.log(\"новый пакет\", _this3.userData.CurrentState);\n          _this3.challengeMakeCockroach();\n          _this3.step();\n          _this3.animalsCount = 0;\n        }\n      })();\n    }\n    removeCockroaches() {\n      this.cockroaches = []; // Очистка массива тараканов\n      const bugIcons = document.querySelectorAll(\".bug-icon\");\n      bugIcons.forEach(bugIcon => bugIcon.remove()); // Удаление элементов из DOM\n      const foodIcons = document.querySelectorAll(\".food-icon\");\n      foodIcons.forEach(foodIcon => foodIcon.remove()); // Удаление элементов из DOM\n    }\n\n    mainSimLoop(data) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        return yield lastValueFrom(_this4.http.post(`http://localhost:4201/evoSim/mainSimLoop`, data));\n      })();\n    }\n    static ɵfac = function SimulationFormComponent_Factory(t) {\n      return new (t || SimulationFormComponent)(i0.ɵɵdirectiveInject(i1.AppComponent), i0.ɵɵdirectiveInject(i2.HttpClient));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SimulationFormComponent,\n      selectors: [[\"simulationForm-comp\"]],\n      inputs: {\n        M: \"M\",\n        N: \"N\",\n        user: \"user\",\n        state: \"state\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 17,\n      vars: 4,\n      consts: [[1, \"navbar\", \"navbar-expand-sm\", \"bg-dark\", \"navbar-dark\"], [1, \"container-fluid\"], [1, \"navbar-nav\", \"mx-auto\"], [1, \"nav-item\"], [1, \"ligo\"], [1, \"d-flex\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"id\", \"fieldHTML\", 1, \"field\"], [\"id\", \"bug-container\", 1, \"header\"], [1, \"center\"], [1, \"but\", 3, \"click\"], [\"height\", \"100\", \"width\", \"100\"], [0, \"xlink\", \"href\", \"/src/app/Animals/body1.svg\"]],\n      template: function SimulationFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"ul\", 2)(3, \"li\", 3)(4, \"h1\", 4);\n          i0.ɵɵtext(5, \"\\u042D\\u0432\\u043E\\u043B\\u044E\\u0446\\u0438\\u044F\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(6, \"form\", 5)(7, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function SimulationFormComponent_Template_button_click_7_listener() {\n            return ctx.buttonClkVihod();\n          });\n          i0.ɵɵtext(8, \" \\u0412\\u044B\\u0445\\u043E\\u0434 \");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(9, \"div\", 7);\n          i0.ɵɵelement(10, \"header\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"br\");\n          i0.ɵɵelementStart(12, \"div\", 9)(13, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function SimulationFormComponent_Template_button_click_13_listener() {\n            return ctx.stopSimulation();\n          });\n          i0.ɵɵtext(14, \"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(15, \"svg\", 11);\n          i0.ɵɵelement(16, \"use\", 12);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵstyleProp(\"width\", ctx.M, \"px\")(\"height\", ctx.N, \"px\");\n        }\n      },\n      dependencies: [CommonModule, FormsModule, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm, HttpClientModule],\n      styles: [\".example[_ngcontent-%COMP%]{color:#006400;background-color:#5f9ea0}.ligo[_ngcontent-%COMP%]{font-family:Montserrat,sans-serif;float:none;color:#a6ff00}.field[_ngcontent-%COMP%]{position:relative;margin-top:30px;margin-left:auto;margin-right:auto;text-align:center;display:flex;align-items:center;justify-content:center}.fields[_ngcontent-%COMP%]{position:relative;margin-left:auto;margin-right:auto;text-align:center;display:block;border:5px inset rgb(217,243,201)}button[_ngcontent-%COMP%]{background-color:#93d21e;border:1px solid transparent}.center[_ngcontent-%COMP%]{text-align:center}.but[_ngcontent-%COMP%]{background-color:#93d21e;color:#fff;font-size:14px;padding:10px 45px;border:1px solid transparent;border-radius:8px;font-weight:600;letter-spacing:.5px;text-transform:uppercase;margin-top:10px;cursor:pointer}#bug-container[_ngcontent-%COMP%]{position:relative;height:200px}.bug-icon[_ngcontent-%COMP%]{height:25px;width:25px;position:absolute;top:0;left:0;z-index:0}\"]\n    });\n  }\n  return SimulationFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}