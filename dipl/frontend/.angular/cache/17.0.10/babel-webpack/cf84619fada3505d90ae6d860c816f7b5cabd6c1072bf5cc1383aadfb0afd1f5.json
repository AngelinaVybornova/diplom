{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { CommonModule } from \"@angular/common\";\nimport { Component, EventEmitter, Output } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nlet BasicSetupComponent = class BasicSetupComponent {\n  buttonState = \"unclicked\";\n  bM;\n  bN;\n  foodProbability = 0;\n  maxOrgNum = 0;\n  appComponentClass;\n  constructor(_appComponentClass) {\n    this.appComponentClass = _appComponentClass;\n  }\n  onChanged = new EventEmitter();\n  buttonClkStartSimulation(bM, bN) {\n    this.onChanged.emit({\n      bM,\n      bN\n    });\n    console.log(\"fdfdfdfd\", this.bM, this.bN);\n    this.appComponentClass.formChange.next(\"startSim\");\n  }\n  buttonClkVihod() {\n    this.appComponentClass.formChange.next(\"vihod\");\n  }\n};\n__decorate([Output()], BasicSetupComponent.prototype, \"onChanged\", void 0);\nBasicSetupComponent = __decorate([Component({\n  selector: \"basicSetup-comp\",\n  templateUrl: \"./basicSetup.component.html\",\n  styleUrls: [\"./basicSetup.component.scss\"],\n  standalone: true,\n  imports: [CommonModule, FormsModule] //чтобы работало *ngIf\n})], BasicSetupComponent);\nexport { BasicSetupComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}