{"ast":null,"code":"import { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../app.component\";\nexport let SimulationFormComponent = /*#__PURE__*/(() => {\n  class SimulationFormComponent {\n    M = 0;\n    N = 0;\n    appComponentClass;\n    constructor(_appComponentClass) {\n      this.appComponentClass = _appComponentClass;\n    }\n    stopSimulation() {\n      this.appComponentClass.formChange.next(\"stopSim\");\n    }\n    // тут пишем логику на typescript\n    cockroaches = [];\n    ngOnInit() {\n      const bugIcons = document.getElementsByClassName(\"bug-icon\");\n      for (let i = 0; i < bugIcons.length; i++) {\n        this.makeCockroach(bugIcons[i]);\n      }\n      this.step();\n    }\n    makeCockroach(icon) {\n      const rect = document.querySelector(\".field\")?.getBoundingClientRect();\n      if (!rect) return; // Проверка на наличие rect\n      const vspeed = 100;\n      const aspeed = 2 * Math.PI;\n      let lastT = 0;\n      let lastTargetTime = -100;\n      let a = 0;\n      let x = Math.random() * (rect.width - 20);\n      let y = Math.random() * (rect.width - 20);\n      let tx = 0;\n      let ty = 0;\n      const update = t => {\n        const rect = document.querySelector(\".field\")?.getBoundingClientRect();\n        if (!rect) return; // Проверка на наличие rect\n        if (t >= lastTargetTime + 1.5 + Math.random()) {\n          tx = Math.random() * (rect.width - 20); // Ограничение по ширине\n          ty = Math.random() * (rect.height - 20); // Ограничение по высоте\n          lastTargetTime = t;\n        }\n        const dt = t - lastT;\n        const ta = Math.atan2(ty - y, tx - x);\n        for (; a < ta; a += 2 * Math.PI) {}\n        for (; a > ta; a -= 2 * Math.PI) {}\n        const a2 = a + 2 * Math.PI;\n        if (ta - a < a2 - ta) {\n          a = Math.min(ta, a + dt * aspeed);\n        } else {\n          a = Math.max(ta, a2 - dt * aspeed);\n        }\n        x += dt * vspeed * Math.cos(a);\n        y += dt * vspeed * Math.sin(a);\n        icon.style.left = x + \"px\";\n        icon.style.top = y + \"px\";\n        icon.style.transform = \"rotate(\" + (180 * a / Math.PI - 135) + \"deg)\";\n        lastT = t;\n      };\n      const cockroach = {\n        update: update\n      };\n      this.cockroaches.push(cockroach);\n      return cockroach;\n    }\n    step() {\n      const t = performance.now() / 1000;\n      for (const cockroach of this.cockroaches) {\n        cockroach.update(t);\n      }\n      window.requestAnimationFrame(() => this.step());\n    }\n    static ɵfac = function SimulationFormComponent_Factory(t) {\n      return new (t || SimulationFormComponent)(i0.ɵɵdirectiveInject(i1.AppComponent));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SimulationFormComponent,\n      selectors: [[\"simulationForm-comp\"]],\n      inputs: {\n        M: \"M\",\n        N: \"N\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 9,\n      vars: 4,\n      consts: [[1, \"field\"], [\"id\", \"bug-container\", 1, \"header\"], [\"id\", \"bug\", \"src\", \"https://svgshare.com/i/t12.svg\", 1, \"bug-icon\"], [1, \"center\"], [3, \"click\"]],\n      template: function SimulationFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1);\n          i0.ɵɵelement(2, \"img\", 2)(3, \"img\", 2)(4, \"img\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(5, \"br\");\n          i0.ɵɵelementStart(6, \"div\", 3)(7, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function SimulationFormComponent_Template_button_click_7_listener() {\n            return ctx.stopSimulation();\n          });\n          i0.ɵɵtext(8, \"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵstyleProp(\"width\", ctx.M, \"px\")(\"height\", ctx.N, \"px\");\n        }\n      },\n      dependencies: [CommonModule, FormsModule],\n      styles: [\".example[_ngcontent-%COMP%]{color:#006400;background-color:#5f9ea0}.field[_ngcontent-%COMP%]{margin-left:auto;margin-right:auto;text-align:center;display:block;border:10px inset lightblue}.center[_ngcontent-%COMP%]{text-align:center}button[_ngcontent-%COMP%]{background-color:#d2691e}#bug-container[_ngcontent-%COMP%]{position:relative;height:200px}.bug-icon[_ngcontent-%COMP%]{height:15px;width:15px;position:absolute;top:0;left:0;z-index:0}\"]\n    });\n  }\n  return SimulationFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}